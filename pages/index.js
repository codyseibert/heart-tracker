import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import Calendar from 'react-calendar';

const SYMPTOM_GOOD = 3;
const SYMPTOM_AVERAGE = 2;
const SYMPTOM_BAD = 1;

const formatDate = (dateToFormat) => {
  return dateToFormat.toISOString().slice(0, 10);
};

const getEntriesInMonth = (YYYYMMDDString) => {
  const yearMonth = YYYYMMDDString.slice(0, 7);
  return fetch(`/api/entries?yearMonth=${yearMonth}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((res) => res.json());
};

const getEntryByDate = (YYYYMMDDString) => {
  return fetch(`/api/entries/${YYYYMMDDString}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((res) => res.json());
};

const putEntryByDate = (YYYYMMDDString, form) => {
  return fetch(`/api/entries/${YYYYMMDDString}`, {
    method: 'PUT',
    body: JSON.stringify(form),
    headers: {
      'Content-Type': 'application/json',
    },
  }).then((res) => res.json());
};

import { dataPoints } from '../business/dataPoints';

export default function Home() {
  const [selectedDate, setSelectedDate] = useState(
    new Date()
  );
  const [entriesOfMonth, setEntriesOfMonth] = useState([]);

  const [form, setForm] = useState({
    symptoms: 1,
    ...Object.keys(dataPoints).map((key) => ({
      [key]: false,
    })),
  });

  const fetchSelectedDateFromApi = (dateToFetch) => {
    getEntryByDate(formatDate(dateToFetch)).then((entry) =>
      setForm(entry)
    );
  };

  const fetchEntriesOfMonthFromApi = (dateToFetch) => {
    getEntriesInMonth(formatDate(dateToFetch)).then(
      (entries) => setEntriesOfMonth(entries)
    );
  };

  useEffect(() => {
    fetchSelectedDateFromApi(selectedDate);
    fetchEntriesOfMonthFromApi(selectedDate);
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    await putEntryByDate(formatDate(selectedDate), form);
    await fetchEntriesOfMonthFromApi(selectedDate);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <Calendar
            className={styles.calendar}
            onChange={(datePicked) => {
              setSelectedDate(datePicked);
              fetchSelectedDateFromApi(datePicked);
            }}
            onActiveStartDateChange={async ({
              activeStartDate,
            }) => {
              await fetchEntriesOfMonthFromApi(
                activeStartDate
              );
            }}
            tileClassName={({ date, view }) => {
              const formattedDate = formatDate(date);
              const entry = entriesOfMonth.find(
                (entry) => entry.date === formattedDate
              );
              if (entry) {
                let symptoms;
                if (entry.symptoms === SYMPTOM_GOOD) {
                  symptoms = 'good';
                } else if (
                  entry.symptoms === SYMPTOM_AVERAGE
                ) {
                  symptoms = 'average';
                } else if (entry.symptoms === SYMPTOM_BAD) {
                  symptoms = 'bad';
                }
                return `calendar-${symptoms}-day`;
              }
            }}
          />
        </div>

        <div>
          <form
            className={styles.symptomsForm}
            onSubmit={handleSubmit}
          >
            <h3>Symptoms</h3>
            <label>
              <input
                onChange={(e) =>
                  setForm({
                    ...form,
                    symptoms: SYMPTOM_GOOD,
                  })
                }
                checked={form.symptoms === SYMPTOM_GOOD}
                type="radio"
                name="symptoms"
              />
              Feeling good
            </label>

            <label>
              <input
                type="radio"
                checked={form.symptoms === SYMPTOM_AVERAGE}
                onChange={(e) =>
                  setForm({
                    ...form,
                    symptoms: SYMPTOM_AVERAGE,
                  })
                }
                name="symptoms"
              />
              Average
            </label>

            <label>
              <input
                onChange={(e) =>
                  setForm({
                    ...form,
                    symptoms: SYMPTOM_BAD,
                  })
                }
                checked={form.symptoms === SYMPTOM_BAD}
                type="radio"
                name="symptoms"
              />
              Bad
            </label>

            <label>
              Notes
              <input
                onChange={(e) =>
                  setForm({
                    ...form,
                    notes: e.target.value,
                  })
                }
                value={form.notes}
                name="notes"
              />
            </label>

            <h3>Data Points</h3>
            {Object.entries(dataPoints).map(
              ([key, entryText]) => (
                <label>
                  <input
                    name={key}
                    type="checkbox"
                    checked={form[key]}
                    onChange={() =>
                      setForm({
                        ...form,
                        [key]: !form[key],
                      })
                    }
                  />
                  {entryText}
                </label>
              )
            )}

            <button type="submit">Save</button>
          </form>
        </div>
      </main>
    </div>
  );
}
